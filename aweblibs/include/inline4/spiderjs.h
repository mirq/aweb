#ifndef INLINE4_SPIDERJS_H
#define INLINE4_SPIDERJS_H

/*
** This file was auto generated by idltool 51.8.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef LIBRARIES_SPIDER_H
#include <libraries/spider.h>
#endif

/* Inline macros for Interface "main" */
#define JS_Now() ISpiderJS->JS_Now() 
#define JS_GetNaNValue(cx) ISpiderJS->JS_GetNaNValue(cx) 
#define JS_GetNegativeInfinityValue(cx) ISpiderJS->JS_GetNegativeInfinityValue(cx) 
#define JS_GetPositiveInfinityValue(cx) ISpiderJS->JS_GetPositiveInfinityValue(cx) 
#define JS_GetEmptyStringValue(cx) ISpiderJS->JS_GetEmptyStringValue(cx) 
#define JS_ConvertArgumentsA(cx, argc, argv, format, args) ISpiderJS->JS_ConvertArgumentsA(cx, argc, argv, format, args) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define JS_ConvertArguments(cx, argc, argv, ...) ISpiderJS->JS_ConvertArguments(cx, argc, argv, __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define JS_ConvertArguments(cx, argc, argv, vargs...) ISpiderJS->JS_ConvertArguments(cx, argc, argv, ## vargs) 
#endif
#define JS_PushArgumentsA(cx, markp, format, args) ISpiderJS->JS_PushArgumentsA(cx, markp, format, args) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define JS_PushArguments(cx, markp, ...) ISpiderJS->JS_PushArguments(cx, markp, __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define JS_PushArguments(cx, markp, vargs...) ISpiderJS->JS_PushArguments(cx, markp, ## vargs) 
#endif
#define JS_PopArguments(cx, mark) ISpiderJS->JS_PopArguments(cx, mark) 
#define JS_ConvertValue(cx, v, type, vp) ISpiderJS->JS_ConvertValue(cx, v, type, vp) 
#define JS_ValueToObject(cx, v) ISpiderJS->JS_ValueToObject(cx, v) 
#define JS_ValueToFunction(cx, v) ISpiderJS->JS_ValueToFunction(cx, v) 
#define JS_ValueToConstructor(cx, v) ISpiderJS->JS_ValueToConstructor(cx, v) 
#define JS_ValueToString(cx, v) ISpiderJS->JS_ValueToString(cx, v) 
#define JS_ValueToNumber(cx, v, dp) ISpiderJS->JS_ValueToNumber(cx, v, dp) 
#define JS_ValueToECMAInt32(cx, v, ip) ISpiderJS->JS_ValueToECMAInt32(cx, v, ip) 
#define JS_ValueToECMAUint32(cx, v, ip) ISpiderJS->JS_ValueToECMAUint32(cx, v, ip) 
#define JS_ValueToInt32(cx, v, ip) ISpiderJS->JS_ValueToInt32(cx, v, ip) 
#define JS_ValueToUint16(cx, v, ip) ISpiderJS->JS_ValueToUint16(cx, v, ip) 
#define JS_ValueToBoolean(cx, v, bp) ISpiderJS->JS_ValueToBoolean(cx, v, bp) 
#define JS_TypeOfValue(cx, v) ISpiderJS->JS_TypeOfValue(cx, v) 
#define JS_GetTypeName(cx, type) ISpiderJS->JS_GetTypeName(cx, type) 
#define JS_NewRuntime(maxbytes) ISpiderJS->JS_NewRuntime(maxbytes) 
#define JS_DestroyRuntime(rt) ISpiderJS->JS_DestroyRuntime(rt) 
#define JS_ShutDown() ISpiderJS->JS_ShutDown() 
#define JS_Lock(rt) ISpiderJS->JS_Lock(rt) 
#define JS_Unlock(rt) ISpiderJS->JS_Unlock(rt) 
#define JS_NewContext(rt, stackChunkSize) ISpiderJS->JS_NewContext(rt, stackChunkSize) 
#define JS_DestroyContext(cx) ISpiderJS->JS_DestroyContext(cx) 
#define JS_DestroyContextNoGC(cx) ISpiderJS->JS_DestroyContextNoGC(cx) 
#define JS_DestroyContextMaybeGC(cx) ISpiderJS->JS_DestroyContextMaybeGC(cx) 
#define JS_GetContextPrivate(cx) ISpiderJS->JS_GetContextPrivate(cx) 
#define JS_SetContextPrivate(cx, data) ISpiderJS->JS_SetContextPrivate(cx, data) 
#define JS_GetRuntime(cx) ISpiderJS->JS_GetRuntime(cx) 
#define JS_ContextIterator(rt, iterp) ISpiderJS->JS_ContextIterator(rt, iterp) 
#define JS_GetVersion(cx) ISpiderJS->JS_GetVersion(cx) 
#define JS_SetVersion(cx, version) ISpiderJS->JS_SetVersion(cx, version) 
#define JS_VersionToString(version) ISpiderJS->JS_VersionToString(version) 
#define JS_StringToVersion(string) ISpiderJS->JS_StringToVersion(string) 
#define JS_GetOptions(cx) ISpiderJS->JS_GetOptions(cx) 
#define JS_SetOptions(cx, options) ISpiderJS->JS_SetOptions(cx, options) 
#define JS_ToggleOptions(cx, options) ISpiderJS->JS_ToggleOptions(cx, options) 
#define JS_GetImplementationVersion() ISpiderJS->JS_GetImplementationVersion() 
#define JS_GetGlobalObject(cx) ISpiderJS->JS_GetGlobalObject(cx) 
#define JS_SetGlobalObject(cx, obj) ISpiderJS->JS_SetGlobalObject(cx, obj) 
#define JS_InitStandardClasses(cx, obj) ISpiderJS->JS_InitStandardClasses(cx, obj) 
#define JS_ResolveStandardClass(cx, obj, id, resolved) ISpiderJS->JS_ResolveStandardClass(cx, obj, id, resolved) 
#define JS_EnumerateStandardClasses(cx, obj) ISpiderJS->JS_EnumerateStandardClasses(cx, obj) 
#define JS_EnumerateResolvedStandardClasses(cx, obj, ida) ISpiderJS->JS_EnumerateResolvedStandardClasses(cx, obj, ida) 
#define JS_GetScopeChain(cx) ISpiderJS->JS_GetScopeChain(cx) 
#define JS_malloc(cx, nbytes) ISpiderJS->JS_malloc(cx, nbytes) 
#define JS_realloc(cx, p, nbytes) ISpiderJS->JS_realloc(cx, p, nbytes) 
#define JS_free(cx, p) ISpiderJS->JS_free(cx, p) 
#define JS_strdup(cx, s) ISpiderJS->JS_strdup(cx, s) 
#define JS_NewDouble(cx, d) ISpiderJS->JS_NewDouble(cx, d) 
#define JS_NewDoubleValue(cx, d, rval) ISpiderJS->JS_NewDoubleValue(cx, d, rval) 
#define JS_NewNumberValue(cx, d, rval) ISpiderJS->JS_NewNumberValue(cx, d, rval) 
#define JS_AddRoot(cx, rp) ISpiderJS->JS_AddRoot(cx, rp) 
#define JS_AddNamedRoot(cx, rp, name) ISpiderJS->JS_AddNamedRoot(cx, rp, name) 
#define JS_AddNamedRootRT(rt, rp, name) ISpiderJS->JS_AddNamedRootRT(rt, rp, name) 
#define JS_RemoveRoot(cx, rp) ISpiderJS->JS_RemoveRoot(cx, rp) 
#define JS_RemoveRootRT(rt, rp) ISpiderJS->JS_RemoveRootRT(rt, rp) 
#define JS_ClearNewbornRoots(cx) ISpiderJS->JS_ClearNewbornRoots(cx) 
#define JS_EnterLocalRootScope(cx) ISpiderJS->JS_EnterLocalRootScope(cx) 
#define JS_LeaveLocalRootScope(cx) ISpiderJS->JS_LeaveLocalRootScope(cx) 
#define JS_ForgetLocalRoot(cx, thing) ISpiderJS->JS_ForgetLocalRoot(cx, thing) 
#define JS_MapGCRoots(rt, map, data) ISpiderJS->JS_MapGCRoots(rt, map, data) 
#define JS_LockGCThing(cx, thing) ISpiderJS->JS_LockGCThing(cx, thing) 
#define JS_LockGCThingRT(rt, thing) ISpiderJS->JS_LockGCThingRT(rt, thing) 
#define JS_UnlockGCThing(cx, thing) ISpiderJS->JS_UnlockGCThing(cx, thing) 
#define JS_UnlockGCThingRT(rt, thing) ISpiderJS->JS_UnlockGCThingRT(rt, thing) 
#define JS_MarkGCThing(cx, thing, name, arg) ISpiderJS->JS_MarkGCThing(cx, thing, name, arg) 
#define JS_GC(cx, ***NULL POINTER***) ISpiderJS->JS_GC(cx, ***NULL POINTER***) 
#define JS_MaybeGC(cx) ISpiderJS->JS_MaybeGC(cx) 
#define JS_SetGCCallback(cx, cb) ISpiderJS->JS_SetGCCallback(cx, cb) 
#define JS_SetGCCallbackRT(rt, cb) ISpiderJS->JS_SetGCCallbackRT(rt, cb) 
#define JS_IsAboutToBeFinalized(cx, thing) ISpiderJS->JS_IsAboutToBeFinalized(cx, thing) 
#define JS_SetGCParameter(rt, key, value) ISpiderJS->JS_SetGCParameter(rt, key, value) 
#define JS_AddExtenalStringFinalizer(finalizer) ISpiderJS->JS_AddExtenalStringFinalizer(finalizer) 
#define JS_RemoveExternalStringFinalizer(finalizer) ISpiderJS->JS_RemoveExternalStringFinalizer(finalizer) 
#define JS_NewExternalString(cx, chars, length, type) ISpiderJS->JS_NewExternalString(cx, chars, length, type) 
#define JS_GetExternalStringGCType(rt, str) ISpiderJS->JS_GetExternalStringGCType(rt, str) 
#define JS_SetThreadStackLimit(cx, limitAddr) ISpiderJS->JS_SetThreadStackLimit(cx, limitAddr) 
#define JS_DestroyIdArray(cx, ida) ISpiderJS->JS_DestroyIdArray(cx, ida) 
#define JS_ValueToId(cx, v) ISpiderJS->JS_ValueToId(cx, v) 
#define JS_IdToValue(cx, id) ISpiderJS->JS_IdToValue(cx, id) 
#define JS_PropertyStub(cx, obj, id, vp) ISpiderJS->JS_PropertyStub(cx, obj, id, vp) 
#define JS_EnumerateStub(cx, obj) ISpiderJS->JS_EnumerateStub(cx, obj) 
#define JS_ResolveStub(cx, obj, id) ISpiderJS->JS_ResolveStub(cx, obj, id) 
#define JS_ConvertStub(cx, obj, type, vp) ISpiderJS->JS_ConvertStub(cx, obj, type, vp) 
#define JS_FinalizeStub(cx, obj) ISpiderJS->JS_FinalizeStub(cx, obj) 
#define JS_InitClass(cx, obj, parent_proto, clasp, constructor, nargs, ps, fs, static_ps, static_fs) ISpiderJS->JS_InitClass(cx, obj, parent_proto, clasp, constructor, nargs, ps, fs, static_ps, static_fs) 
#define JS_GetClass(obj) ISpiderJS->JS_GetClass(obj) 
#define JS_InstanceOf(cx, obj, clasp, argv) ISpiderJS->JS_InstanceOf(cx, obj, clasp, argv) 
#define JS_HasInstance(cx, obj, v, bp) ISpiderJS->JS_HasInstance(cx, obj, v, bp) 
#define JS_GetPrivate(cx, obj) ISpiderJS->JS_GetPrivate(cx, obj) 
#define JS_SetPrivate(cx, obj, data) ISpiderJS->JS_SetPrivate(cx, obj, data) 
#define JS_GetInstancePrivate(cx, obj, clasp, argv) ISpiderJS->JS_GetInstancePrivate(cx, obj, clasp, argv) 
#define JS_GetPrototype(cx, obj) ISpiderJS->JS_GetPrototype(cx, obj) 
#define JS_SetPrototype(cx, obj, proto) ISpiderJS->JS_SetPrototype(cx, obj, proto) 
#define JS_GetParent(cx, obj) ISpiderJS->JS_GetParent(cx, obj) 
#define JS_SetParent(cx, obj, parent) ISpiderJS->JS_SetParent(cx, obj, parent) 
#define JS_GetConstructor(cx, proto) ISpiderJS->JS_GetConstructor(cx, proto) 
#define JS_GetObjectId(cx, obj, idp) ISpiderJS->JS_GetObjectId(cx, obj, idp) 
#define JS_NewObject(cx, clasp, proto, parent) ISpiderJS->JS_NewObject(cx, clasp, proto, parent) 
#define JS_SealObject(cx, obj, deep) ISpiderJS->JS_SealObject(cx, obj, deep) 
#define JS_ConstructObject(cx, clasp, proto, parent) ISpiderJS->JS_ConstructObject(cx, clasp, proto, parent) 
#define JS_ConstructObjectWithArguments(cx, clasp, proto, parent, argc, argv) ISpiderJS->JS_ConstructObjectWithArguments(cx, clasp, proto, parent, argc, argv) 
#define JS_DefineObject(cx, obj, name, clasp, proto, attrs) ISpiderJS->JS_DefineObject(cx, obj, name, clasp, proto, attrs) 
#define JS_DefineConstDoubles(cx, obj, cds) ISpiderJS->JS_DefineConstDoubles(cx, obj, cds) 
#define JS_DefineProperties(cx, obj, ps) ISpiderJS->JS_DefineProperties(cx, obj, ps) 
#define JS_DefineProperty(cx, obj, name, value, getter, setter, attrs) ISpiderJS->JS_DefineProperty(cx, obj, name, value, getter, setter, attrs) 
#define JS_GetPropertyAttributes(cx, obj, name, attrsp, foundp) ISpiderJS->JS_GetPropertyAttributes(cx, obj, name, attrsp, foundp) 
#define JS_GetPropertyAttrsGetterAndSetter(cx, obj, name, attrsp, foundp, getterp, setterp) ISpiderJS->JS_GetPropertyAttrsGetterAndSetter(cx, obj, name, attrsp, foundp, getterp, setterp) 
#define JS_SetPropertyAttributes(cx, obj, name, attrs, foundp) ISpiderJS->JS_SetPropertyAttributes(cx, obj, name, attrs, foundp) 
#define JS_DefinePropertyWithTinyId(cx, obj, name, tinyid, value, getter, setter, attrs) ISpiderJS->JS_DefinePropertyWithTinyId(cx, obj, name, tinyid, value, getter, setter, attrs) 
#define JS_AliasProperty(cx, obj, name, alias) ISpiderJS->JS_AliasProperty(cx, obj, name, alias) 
#define JS_HasProperty(cx, obj, name, foundp) ISpiderJS->JS_HasProperty(cx, obj, name, foundp) 
#define JS_LookupProperty(cx, obj, name, vp) ISpiderJS->JS_LookupProperty(cx, obj, name, vp) 
#define JS_LookupPropertyWithFlags(cx, obj, name, flags, vp) ISpiderJS->JS_LookupPropertyWithFlags(cx, obj, name, flags, vp) 
#define JS_GetProperty(cx, obj, name, vp) ISpiderJS->JS_GetProperty(cx, obj, name, vp) 
#define JS_GetMethod(cx, obj, name, objp, vp) ISpiderJS->JS_GetMethod(cx, obj, name, objp, vp) 
#define JS_SetProperty(cx, obj, name, vp) ISpiderJS->JS_SetProperty(cx, obj, name, vp) 
#define JS_DeleteProperty(cx, obj, name) ISpiderJS->JS_DeleteProperty(cx, obj, name) 
#define JS_DeleteProperty2(cx, obj, name, rval) ISpiderJS->JS_DeleteProperty2(cx, obj, name, rval) 
#define JS_DefineUCProperty(cx, obj, name, namelen, value, getter, setter, attrs) ISpiderJS->JS_DefineUCProperty(cx, obj, name, namelen, value, getter, setter, attrs) 
#define JS_GetUCPropertyAttributes(cx, obj, name, namelen, attrsp, foundp) ISpiderJS->JS_GetUCPropertyAttributes(cx, obj, name, namelen, attrsp, foundp) 
#define JS_GetUCPropertyAttrsGetterAndSetter(cx, obj, name, namelen, attrsp, foundp, getterp, setterp) ISpiderJS->JS_GetUCPropertyAttrsGetterAndSetter(cx, obj, name, namelen, attrsp, foundp, getterp, setterp) 
#define JS_SetUCPropertyAttributes(cx, obj, name, namelen, attrs, foundp) ISpiderJS->JS_SetUCPropertyAttributes(cx, obj, name, namelen, attrs, foundp) 
#define JS_DefineUCPropertyWithTinyId(cx, obj, name, namelen, tinyid, value, getter, setter, attrs) ISpiderJS->JS_DefineUCPropertyWithTinyId(cx, obj, name, namelen, tinyid, value, getter, setter, attrs) 
#define JS_HasUCProperty(cx, obj, name, namelen, vp) ISpiderJS->JS_HasUCProperty(cx, obj, name, namelen, vp) 
#define JS_LookupUCProperty(cx, obj, name, namelen, vp) ISpiderJS->JS_LookupUCProperty(cx, obj, name, namelen, vp) 
#define JS_GetUCProperty(cx, obj, name, namelen, vp) ISpiderJS->JS_GetUCProperty(cx, obj, name, namelen, vp) 
#define JS_SetUCProperty(cx, obj, name, namelen, vp) ISpiderJS->JS_SetUCProperty(cx, obj, name, namelen, vp) 
#define JS_DeleteUCProperty2(cx, obj, name, namelen, rval) ISpiderJS->JS_DeleteUCProperty2(cx, obj, name, namelen, rval) 
#define JS_NewArrayObject(cx, length, vector) ISpiderJS->JS_NewArrayObject(cx, length, vector) 
#define JS_IsArrayObject(cx, obj) ISpiderJS->JS_IsArrayObject(cx, obj) 
#define JS_GetArrayLength(cx, obj, lengthp) ISpiderJS->JS_GetArrayLength(cx, obj, lengthp) 
#define JS_SetArrayLength(cx, obj, length) ISpiderJS->JS_SetArrayLength(cx, obj, length) 
#define JS_HasArrayLength(cx, obj, lengthp) ISpiderJS->JS_HasArrayLength(cx, obj, lengthp) 
#define JS_DefineElement(cx, obj, index, value, getter, setter, attrs) ISpiderJS->JS_DefineElement(cx, obj, index, value, getter, setter, attrs) 
#define JS_AliasElement(cx, obj, name, alias) ISpiderJS->JS_AliasElement(cx, obj, name, alias) 
#define JS_HasElement(cx, obj, index, foundp) ISpiderJS->JS_HasElement(cx, obj, index, foundp) 
#define JS_LookupElement(cx, obj, index, vp) ISpiderJS->JS_LookupElement(cx, obj, index, vp) 
#define JS_GetElement(cx, obj, index, vp) ISpiderJS->JS_GetElement(cx, obj, index, vp) 
#define JS_SetElement(cx, obj, index, vp) ISpiderJS->JS_SetElement(cx, obj, index, vp) 
#define JS_DeleteElement(cx, obj, index) ISpiderJS->JS_DeleteElement(cx, obj, index) 
#define JS_DeleteElement2(cx, obj, index, rval) ISpiderJS->JS_DeleteElement2(cx, obj, index, rval) 
#define JS_ClearScope(cx, obj) ISpiderJS->JS_ClearScope(cx, obj) 
#define JS_Enumerate(cx, obj) ISpiderJS->JS_Enumerate(cx, obj) 
#define JS_NewPropertyIterator(cx, obj) ISpiderJS->JS_NewPropertyIterator(cx, obj) 
#define JS_NextProperty(cx, iterobj, idp) ISpiderJS->JS_NextProperty(cx, iterobj, idp) 
#define JS_CheckAccess(cx, obj, id, mode, vp, attrsp) ISpiderJS->JS_CheckAccess(cx, obj, id, mode, vp, attrsp) 
#define JS_SetCheckObjectAccessCallback(rt, acb) ISpiderJS->JS_SetCheckObjectAccessCallback(rt, acb) 
#define JS_GetReservedSlot(cx, obj, index, vp) ISpiderJS->JS_GetReservedSlot(cx, obj, index, vp) 
#define JS_SetReservedSlot(cx, obj, index, v) ISpiderJS->JS_SetReservedSlot(cx, obj, index, v) 
#define JS_SetPrincipalsTranscoder(rt, px) ISpiderJS->JS_SetPrincipalsTranscoder(rt, px) 
#define JS_SetObjectPrincipalsFinder(rt, fop) ISpiderJS->JS_SetObjectPrincipalsFinder(rt, fop) 
#define JS_NewFunction(cx, call, nargs, flags, parent, name) ISpiderJS->JS_NewFunction(cx, call, nargs, flags, parent, name) 
#define JS_GetFunctionObject(fun) ISpiderJS->JS_GetFunctionObject(fun) 
#define JS_GetFunctionName(fun) ISpiderJS->JS_GetFunctionName(fun) 
#define JS_GetFunctionId(fun) ISpiderJS->JS_GetFunctionId(fun) 
#define JS_GetFunctionFlags(fun) ISpiderJS->JS_GetFunctionFlags(fun) 
#define JS_GetFunctionArity(fun) ISpiderJS->JS_GetFunctionArity(fun) 
#define JS_ObjectIsFunction(cx, obj) ISpiderJS->JS_ObjectIsFunction(cx, obj) 
#define JS_DefineFunctions(cx, obj, fs) ISpiderJS->JS_DefineFunctions(cx, obj, fs) 
#define JS_DefineFunction(cx, obj, name, call, nargs, attrs) ISpiderJS->JS_DefineFunction(cx, obj, name, call, nargs, attrs) 
#define JS_DefineUCFunction(cx, obj, name, namelen, call, nargs, attrs) ISpiderJS->JS_DefineUCFunction(cx, obj, name, namelen, call, nargs, attrs) 
#define JS_CloneFunctionObject(cx, funobj, parent) ISpiderJS->JS_CloneFunctionObject(cx, funobj, parent) 
#define JS_BufferIsCompilableUnit(cx, obj, bytes, length) ISpiderJS->JS_BufferIsCompilableUnit(cx, obj, bytes, length) 
#define JS_CompileScript(cx, obj, bytes, length, filename, lineno) ISpiderJS->JS_CompileScript(cx, obj, bytes, length, filename, lineno) 
#define JS_CompileScriptForPrincipals(cx, obj, principals, bytes, length, filename, lineno) ISpiderJS->JS_CompileScriptForPrincipals(cx, obj, principals, bytes, length, filename, lineno) 
#define JS_CompileUCScript(cx, obj, chars, length, filename, lineno) ISpiderJS->JS_CompileUCScript(cx, obj, chars, length, filename, lineno) 
#define JS_CompileUCScriptForPrincipals(cx, obj, principals, chars, length, filename, lineno) ISpiderJS->JS_CompileUCScriptForPrincipals(cx, obj, principals, chars, length, filename, lineno) 
#define JS_CompileFile(cx, obj, filename) ISpiderJS->JS_CompileFile(cx, obj, filename) 
#define JS_CompileFileHandle(cx, obj, filename, fh) ISpiderJS->JS_CompileFileHandle(cx, obj, filename, fh) 
#define JS_CompileFileHandleForPrincipals(cx, obj, filename, fh, principals) ISpiderJS->JS_CompileFileHandleForPrincipals(cx, obj, filename, fh, principals) 
#define JS_NewScriptObject(cx, script) ISpiderJS->JS_NewScriptObject(cx, script) 
#define JS_GetScriptObject(script) ISpiderJS->JS_GetScriptObject(script) 
#define JS_DestroyScript(cx, script) ISpiderJS->JS_DestroyScript(cx, script) 
#define JS_CompileFunction(cx, obj, name, nargs, argnames, bytes, length, filename, lineno) ISpiderJS->JS_CompileFunction(cx, obj, name, nargs, argnames, bytes, length, filename, lineno) 
#define JS_CompileFunctionForPrincipals(cx, obj, principals, name, nargs, argnames, bytes, length, filename, lineno) ISpiderJS->JS_CompileFunctionForPrincipals(cx, obj, principals, name, nargs, argnames, bytes, length, filename, lineno) 
#define JS_CompileUCFunction(cx, obj, name, nargs, argnames, chars, length, filename, lineno) ISpiderJS->JS_CompileUCFunction(cx, obj, name, nargs, argnames, chars, length, filename, lineno) 
#define JS_CompileUCFunctionForPrincipals(cx, obj, principals, name, nargs, argnames, chars, length, filename, lineno) ISpiderJS->JS_CompileUCFunctionForPrincipals(cx, obj, principals, name, nargs, argnames, chars, length, filename, lineno) 
#define JS_DecompileScript(cx, script, name, indent) ISpiderJS->JS_DecompileScript(cx, script, name, indent) 
#define JS_DecompileFunction(cx, fun, indent) ISpiderJS->JS_DecompileFunction(cx, fun, indent) 
#define JS_DecompileFunctionBody(cx, fun, indent) ISpiderJS->JS_DecompileFunctionBody(cx, fun, indent) 
#define JS_ExecuteScript(cx, obj, script, rval) ISpiderJS->JS_ExecuteScript(cx, obj, script, rval) 
#define JS_ExecuteScriptPart(cx, obj, script, part) ISpiderJS->JS_ExecuteScriptPart(cx, obj, script, part) 
#define JS_EvaluateScript(cx, obj, bytes, length, filename, lineno, rval) ISpiderJS->JS_EvaluateScript(cx, obj, bytes, length, filename, lineno, rval) 
#define JS_EvaluateScriptForPrincipals(cx, obj, principals, bytes, length, filename, lineno, rval) ISpiderJS->JS_EvaluateScriptForPrincipals(cx, obj, principals, bytes, length, filename, lineno, rval) 
#define JS_EvaluateUCScript(cx, obj, chars, length, filename, lineno, rval) ISpiderJS->JS_EvaluateUCScript(cx, obj, chars, length, filename, lineno, rval) 
#define JS_EvaluateUCScriptForPrincipals(cx, obj, principals, chars, length, filename, lineno, rval) ISpiderJS->JS_EvaluateUCScriptForPrincipals(cx, obj, principals, chars, length, filename, lineno, rval) 
#define JS_CallFunction(cx, obj, fun, argc, argv, rval) ISpiderJS->JS_CallFunction(cx, obj, fun, argc, argv, rval) 
#define JS_CallFunctionName(cx, obj, name, argc, argv, rval) ISpiderJS->JS_CallFunctionName(cx, obj, name, argc, argv, rval) 
#define JS_CallFunctionValue(cx, obj, fval, argc, argv, rval) ISpiderJS->JS_CallFunctionValue(cx, obj, fval, argc, argv, rval) 
#define JS_SetBranchCallback(cx, cb) ISpiderJS->JS_SetBranchCallback(cx, cb) 
#define JS_IsRunning(cx) ISpiderJS->JS_IsRunning(cx) 
#define JS_IsConstructing(cx) ISpiderJS->JS_IsConstructing(cx) 
#define JS_IsAssigning(cx) ISpiderJS->JS_IsAssigning(cx) 
#define JS_SetCallReturnValue2(cx, v) ISpiderJS->JS_SetCallReturnValue2(cx, v) 
#define JS_NewString(cx, bytes, length) ISpiderJS->JS_NewString(cx, bytes, length) 
#define JS_NewStringCopyN(cx, s, n) ISpiderJS->JS_NewStringCopyN(cx, s, n) 
#define JS_NewStringCopyZ(cx, s) ISpiderJS->JS_NewStringCopyZ(cx, s) 
#define JS_InternString(cx, s) ISpiderJS->JS_InternString(cx, s) 
#define JS_NewUCString(cx, chars, length) ISpiderJS->JS_NewUCString(cx, chars, length) 
#define JS_NewUCStringCopyN(cx, s, n) ISpiderJS->JS_NewUCStringCopyN(cx, s, n) 
#define JS_NewUCStringCopyZ(cx, s) ISpiderJS->JS_NewUCStringCopyZ(cx, s) 
#define JS_InternUCStringN(cx, s, length) ISpiderJS->JS_InternUCStringN(cx, s, length) 
#define JS_InternUCString(cx, s) ISpiderJS->JS_InternUCString(cx, s) 
#define JS_GetStringBytes(str) ISpiderJS->JS_GetStringBytes(str) 
#define JS_GetStringChars(str) ISpiderJS->JS_GetStringChars(str) 
#define JS_GetStringLength(str) ISpiderJS->JS_GetStringLength(str) 
#define JS_CompareStrings(str1, str2) ISpiderJS->JS_CompareStrings(str1, str2) 
#define JS_NewGrowableString(cx, chars, length) ISpiderJS->JS_NewGrowableString(cx, chars, length) 
#define JS_NewDependentString(cx, str, start, length) ISpiderJS->JS_NewDependentString(cx, str, start, length) 
#define JS_ConcatStrings(cx, left, right) ISpiderJS->JS_ConcatStrings(cx, left, right) 
#define JS_UndependString(cx, str) ISpiderJS->JS_UndependString(cx, str) 
#define JS_MakeStringImmutable(cx, str) ISpiderJS->JS_MakeStringImmutable(cx, str) 
#define JS_StringsAreUTF8() ISpiderJS->JS_StringsAreUTF8() 
#define JS_EncodeCharacters(cx, src, srclen, dst, dstlenp) ISpiderJS->JS_EncodeCharacters(cx, src, srclen, dst, dstlenp) 
#define JS_DecodeBytes(cx, src, srclen, dst, dstlenp) ISpiderJS->JS_DecodeBytes(cx, src, srclen, dst, dstlenp) 
#define JS_SetLocaleCallbacks(cx, callbacks) ISpiderJS->JS_SetLocaleCallbacks(cx, callbacks) 
#define JS_GetLocaleCallbacks(cx, ***NULL POINTER***) ISpiderJS->JS_GetLocaleCallbacks(cx, ***NULL POINTER***) 
#define JS_ReportErrorA(cx, format, args) ISpiderJS->JS_ReportErrorA(cx, format, args) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define JS_ReportError(cx, ...) ISpiderJS->JS_ReportError(cx, __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define JS_ReportError(cx, vargs...) ISpiderJS->JS_ReportError(cx, ## vargs) 
#endif
#define JS_ReportErrorNumberA(cx, errorCallback, userRef, errorNumber, args) ISpiderJS->JS_ReportErrorNumberA(cx, errorCallback, userRef, errorNumber, args) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define JS_ReportErrorNumber(cx, errorCallback, userRef, ...) ISpiderJS->JS_ReportErrorNumber(cx, errorCallback, userRef, __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define JS_ReportErrorNumber(cx, errorCallback, userRef, vargs...) ISpiderJS->JS_ReportErrorNumber(cx, errorCallback, userRef, ## vargs) 
#endif
#define JS_ReportErrorNumberUCA(cx, errorCallback, userRef, errorNumber, args) ISpiderJS->JS_ReportErrorNumberUCA(cx, errorCallback, userRef, errorNumber, args) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define JS_ReportErrorNumberUC(cx, errorCallback, userRef, ...) ISpiderJS->JS_ReportErrorNumberUC(cx, errorCallback, userRef, __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define JS_ReportErrorNumberUC(cx, errorCallback, userRef, vargs...) ISpiderJS->JS_ReportErrorNumberUC(cx, errorCallback, userRef, ## vargs) 
#endif
#define JS_ReportWarningA(cx, format, args) ISpiderJS->JS_ReportWarningA(cx, format, args) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define JS_ReportWarning(cx, ...) ISpiderJS->JS_ReportWarning(cx, __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define JS_ReportWarning(cx, vargs...) ISpiderJS->JS_ReportWarning(cx, ## vargs) 
#endif
#define JS_ReportErrorFlagsAndNumberA(cx, flags, errorCallback, userRef, errorNumber, args) ISpiderJS->JS_ReportErrorFlagsAndNumberA(cx, flags, errorCallback, userRef, errorNumber, args) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define JS_ReportErrorFlagsAndNumber(cx, flags, errorCallback, userRef, ...) ISpiderJS->JS_ReportErrorFlagsAndNumber(cx, flags, errorCallback, userRef, __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define JS_ReportErrorFlagsAndNumber(cx, flags, errorCallback, userRef, vargs...) ISpiderJS->JS_ReportErrorFlagsAndNumber(cx, flags, errorCallback, userRef, ## vargs) 
#endif
#define JS_ReportErrorFlagsAndNumberUCA(cx, flags, errorCallback, userRef, errorNumber, args) ISpiderJS->JS_ReportErrorFlagsAndNumberUCA(cx, flags, errorCallback, userRef, errorNumber, args) 
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define JS_ReportErrorFlagsAndNumberUC(cx, flags, errorCallback, userRef, ...) ISpiderJS->JS_ReportErrorFlagsAndNumberUC(cx, flags, errorCallback, userRef, __VA_ARGS__) 
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define JS_ReportErrorFlagsAndNumberUC(cx, flags, errorCallback, userRef, vargs...) ISpiderJS->JS_ReportErrorFlagsAndNumberUC(cx, flags, errorCallback, userRef, ## vargs) 
#endif
#define JS_ReportOutOfMemory(cx) ISpiderJS->JS_ReportOutOfMemory(cx) 
#define JS_SetErrorReporter(cx, er) ISpiderJS->JS_SetErrorReporter(cx, er) 
#define JS_NewRegExpObject(cx, bytes, length, flags) ISpiderJS->JS_NewRegExpObject(cx, bytes, length, flags) 
#define JS_NewUCRegExpObject(cx, chars, length, flags) ISpiderJS->JS_NewUCRegExpObject(cx, chars, length, flags) 
#define JS_SetRegExpInput(cx, input, multiline) ISpiderJS->JS_SetRegExpInput(cx, input, multiline) 
#define JS_ClearRegExpStatics(cx) ISpiderJS->JS_ClearRegExpStatics(cx) 
#define JS_ClearRegExpRoots(cx) ISpiderJS->JS_ClearRegExpRoots(cx) 
#define JS_IsExceptionPending(cx) ISpiderJS->JS_IsExceptionPending(cx) 
#define JS_GetPendingException(cx, vp) ISpiderJS->JS_GetPendingException(cx, vp) 
#define JS_SetPendingException(cx, v) ISpiderJS->JS_SetPendingException(cx, v) 
#define JS_ClearPendingException(cx) ISpiderJS->JS_ClearPendingException(cx) 
#define JS_ReportPendingException(cx) ISpiderJS->JS_ReportPendingException(cx) 
#define JS_SaveExceptionState(cx) ISpiderJS->JS_SaveExceptionState(cx) 
#define JS_RestoreExceptionState(cx, state) ISpiderJS->JS_RestoreExceptionState(cx, state) 
#define JS_DropExceptionState(cx, state) ISpiderJS->JS_DropExceptionState(cx, state) 
#define JS_ErrorFromException(cx, v) ISpiderJS->JS_ErrorFromException(cx, v) 
#define JS_ThrowReportedError(cx, message, reportp) ISpiderJS->JS_ThrowReportedError(cx, message, reportp) 

#endif /* INLINE4_SPIDERJS_H */
