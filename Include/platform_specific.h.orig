/**********************************************************************

   This file is part of the AWeb-II distribution

   Copyright (C) 2002 Yvon Rozijn
   Copyright (c) 2002 The AWeb Developement Team

   This program is free software; you can redistribute it and/or modify
   it under the terms of the AWeb Public License as included in this
   distribution.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   AWeb Public License for more details.

   $Id: platform_specific.h,v 1.2 2004/06/19 00:29:31 broadblues Exp $

   Desc: Collection of macros which constitute part of the platform isolation
         layer.

***********************************************************************/

/*
    This file contains a bunch of macros which serve to handle functions
    with registerized parameters in the Amiga fashion even on non Amiga
    architectures and with different kind of compilers, providing one single
    and simple interface for the programmer.

    The macros are of the form

        USRFUNC_Xn
        (
            rtype, name,           // Return type and Name of the function
            type1, name1, reg1     // Respectively type, name and register of the first parameter
            ...
            typen, namen, regn     // Respectively type, name and register of the n-th parameter
        )

        in "USRFUNC_Xn", "X" can either be

            "P", for function prototypes

        or

            "H", for function headers

        and "n" has to be replaced by the number of arguments that the function accepts.

        Registers have to be expressed in capital letters and without quotes, in this way:

            A0, A1, A2,... An and D0, D1, D2, ..., Dn

        The macros will take care of converting their arguments in a proper source code suited
        for the platform in use.

        Example of usage: say the function "foo" accepts 3 arguments, which have to be stored in
        A0, D0 and D1, and say the function is static and returns an integeg;

        This is the code for the prototype:

            USRFUNC_P3
            (
                static int, foo,
                int *, bar,   A0,
                int,   baz,   D0,
                long,  dummy, D1
            );

         The code for the function itself is almost equal, except for the fact that "P" is
         substituted with "H", and two new macros are used:

            USRFUNC_H3
            (
                static int, foo,
                int *, bar,   A0,
                int,   baz,   D0,
                long,  dummy, D1
            )
            {
                USRFUNC_INIT

                int res = 0;

                ...
                ...
                ...

                return res;

                USRFUNC_EXIT
            }

        Two new macros are introduced:

            USRFUNC_INIT - Always put this at the top of the function body,
                           before any code

            USRFUNC_EXIT - Always put this at the end of the function body,
                           after any code

        Those above macros are ALWAYS to be used when writing a function with registerized
        paramenters. Don't forget the USRFUNC_#? macros!
*/


#ifndef PLATFORM_SPECIFIC_H
#define PLATFORM_SPECIFIC_H

#if !defined(__AMIGADATE__)
#    define __AMIGADATE__ __DATE__
#endif

#if !defined(__AROS__)

#include <exec/types.h>

typedef ULONG IPTR;

#if defined(__GNUC__) && defined(__amigaos__)

#     define NO_INLINE_STDARG

#     define ASM_A0 __asm("a0")
#     define ASM_A1 __asm("a1")
#     define ASM_A2 __asm("a2")
#     define ASM_A3 __asm("a3")
#     define ASM_A4 __asm("a4")
#     define ASM_A5 __asm("a5")
#     define ASM_A6 __asm("a6")
#     define ASM_A7 __asm("a7")

#     define ASM_D0 __asm("d0")
#     define ASM_D1 __asm("d1")
#     define ASM_D2 __asm("d2")
#     define ASM_D3 __asm("d3")
#     define ASM_D4 __asm("d4")
#     define ASM_D5 __asm("d5")
#     define ASM_D6 __asm("d6")
#     define ASM_D7 __asm("d7")

#     define ASMARG(type, name, reg) register type name ASM_##reg
#     define __ASMFPREFIX

#ifndef CPU

#ifdef mc68060
#define CPU "mc68060"
#endif

#ifdef mc68040
#define CPU "mc68040"
#endif

#ifdef mc68030
#define CPU "mc68030"
#endif

#ifdef mc68020
#define CPU "mc68020"
#endif

#ifndef CPU

#ifdef mc68000
#define CPU "mc68000"
#endif

#endif

#endif

#elif defined(__SASC)

#     define ASM_A0 __a0
#     define ASM_A1 __a1
#     define ASM_A2 __a2
#     define ASM_A3 __a3
#     define ASM_A4 __a4
#     define ASM_A5 __a5
#     define ASM_A6 __a6
#     define ASM_A7 __a7

#     define ASM_D0 __d0
#     define ASM_D1 __d1
#     define ASM_D2 __d2
#     define ASM_D3 __d3
#     define ASM_D4 __d4
#     define ASM_D5 __d5
#     define ASM_D6 __d6
#     define ASM_D7 __d7

#     define ASMARG(type, name, reg) register ASM_##reg type name
#     define __ASMFPREFIX __asm

#else

#    error Your compiler and/or operating system are/is not supported.

#endif

#    define USRFUNC_INIT
#    define USRFUNC_EXIT

#    define LIBFUNC_INIT
#    define LIBFUNC_EXIT

#    define USRFUNC_P0(rtype, fname) \
     __ASMFPREFIX rtype fname() \

#    define USRFUNC_P1(rtype, fname, a1t, a1n, a1r) \
     __ASMFPREFIX rtype fname   \
     (                          \
         ASMARG(a1t, a1n, a1r)  \
     )

#    define USRFUNC_P2(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r) \
     __ASMFPREFIX rtype fname   \
     (                          \
         ASMARG(a1t, a1n, a1r), \
         ASMARG(a2t, a2n, a2r)  \
     )

#    define USRFUNC_P3(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r) \
     __ASMFPREFIX rtype fname   \
     (                          \
         ASMARG(a1t, a1n, a1r), \
         ASMARG(a2t, a2n, a2r), \
         ASMARG(a3t, a3n, a3r)  \
     )

#    define USRFUNC_P4(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r) \
     __ASMFPREFIX rtype fname   \
     (                          \
         ASMARG(a1t, a1n, a1r), \
         ASMARG(a2t, a2n, a2r), \
         ASMARG(a3t, a3n, a3r), \
         ASMARG(a4t, a4n, a4r)  \
     )

#    define USRFUNC_P5(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r, a5t, a5n, a5r) \
     __ASMFPREFIX rtype fname   \
     (                          \
         ASMARG(a1t, a1n, a1r), \
         ASMARG(a2t, a2n, a2r), \
         ASMARG(a3t, a3n, a3r), \
         ASMARG(a4t, a4n, a4r), \
         ASMARG(a5t, a5n, a5r)  \
     )

#    define USRFUNC_P6(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r, a5t, a5n, a5r, \
                                     a6t, a6n, a6r) \
     __ASMFPREFIX rtype fname   \
     (                          \
         ASMARG(a1t, a1n, a1r), \
         ASMARG(a2t, a2n, a2r), \
         ASMARG(a3t, a3n, a3r), \
         ASMARG(a4t, a4n, a4r), \
         ASMARG(a5t, a5n, a5r), \
         ASMARG(a6t, a6n, a6r)  \
     )

#    define USRFUNC_P7(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r, a5t, a5n, a5r, \
                                     a6t, a6n, a6r, a7t, a7n, a7r) \
     __ASMFPREFIX rtype fname   \
     (                          \
         ASMARG(a1t, a1n, a1r), \
         ASMARG(a2t, a2n, a2r), \
         ASMARG(a3t, a3n, a3r), \
         ASMARG(a4t, a4n, a4r), \
         ASMARG(a5t, a5n, a5r), \
         ASMARG(a6t, a6n, a6r), \
         ASMARG(a7t, a7n, a7r)  \
     )

#    define USRFUNC_P8(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r, a5t, a5n, a5r, \
                                     a6t, a6n, a6r, a7t, a7n, a7r, a8t, a8n, a8r) \
     __ASMFPREFIX rtype fname   \
     (                          \
         ASMARG(a1t, a1n, a1r), \
         ASMARG(a2t, a2n, a2r), \
         ASMARG(a3t, a3n, a3r), \
         ASMARG(a4t, a4n, a4r), \
         ASMARG(a5t, a5n, a5r), \
         ASMARG(a6t, a6n, a6r), \
         ASMARG(a7t, a7n, a7r), \
         ASMARG(a8t, a8n, a8r)  \
     )

#    define USRFUNC_H0(rtype, fname) \
     USRFUNC_P0(rtype, fname)

#    define USRFUNC_H1(rtype, fname, a1t, a1n, a1r) \
     USRFUNC_P1(rtype, fname, a1t, a1n, a1r)

#    define USRFUNC_H2(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r) \
     USRFUNC_P2(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r)

#    define USRFUNC_H3(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r) \
     USRFUNC_P3(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r)

#    define USRFUNC_H4(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r) \
     USRFUNC_P4(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r)

#    define USRFUNC_H5(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r, a5t, a5n, a5r) \
     USRFUNC_P5(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r, a5t, a5n, a5r)

#    define USRFUNC_H6(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r, a5t, a5n, a5r, \
                                     a6t, a6n, a6r) \
     USRFUNC_P6(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r, a5t, a5n, a5r, \
                              a6t, a6n, a6r)

#    define USRFUNC_H8(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r, a5t, a5n, a5r, \
                                     a6t, a6n, a6r, a7t, a7n, a7r, a8t, a8n, a8r) \
     USRFUNC_P8(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r, a5t, a5n, a5r, \
                              a6t, a6n, a6r, a7t, a7n, a7r, a8t, a8n, a8r)

#    define USRFUNC_H7(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r, a5t, a5n, a5r, \
                                     a6t, a6n, a6r, a7t, a7n, a7r) \
     USRFUNC_P7(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r, a4t, a4n, a4r, a5t, a5n, a5r, \
                              a6t, a6n, a6r, a7t, a7n, a7r)

#    define LIBFUNC_P0(rtype, fname, bt, bn)\
     USRFUNC_P1(rtype, fname, bt, bn, A6)

#    define LIBFUNC_P1(rtype, fname, a1t, a1n, a1r, bt, bn)\
     USRFUNC_P2(rtype, fname, bt, bn, A6, a1t, a1n, a1r)

#    define LIBFUNC_P2(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, bt, bn)\
     USRFUNC_P3(rtype, fname, bt, bn, A6, a1t, a1n, a1r, a2t, a2n, a2r)

#    define LIBFUNC_H0(rtype, fname, bt, bn)\
     USRFUNC_H1(rtype, fname, bt, bn, A6)

#    define LIBFUNC_H1(rtype, fname, a1t, a1n, a1r, bt, bn)\
     USRFUNC_H2(rtype, fname, bt, bn, A6, a1t, a1n, a1r)

#    define LIBFUNC_H2(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, bt, bn)\
     USRFUNC_H3(rtype, fname, bt, bn, A6, a1t, a1n, a1r, a2t, a2n, a2r)

#    define USRFUNC_C1(rtype, fname, a1t, a1n, a1r) \
     fname(a1n)

#    define USRFUNC_C2(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r) \
     fname(a1n, a2n)

#    define USRFUNC_C3(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r) \
     fname(a1n, a2n, a3n)

#else /* !__AROS__ */

#    include <aros/asmcall.h>
#    include <aros/libcall.h>

#    define USRFUNC_INIT AROS_USERFUNC_INIT
#    define USRFUNC_EXIT AROS_USERFUNC_EXIT

#    define LIBFUNC_INIT AROS_LIBFUNC_INIT
#    define LIBFUNC_EXIT AROS_LIBFUNC_EXIT

#    define USRFUNC_P1(rtype, fname, a1t, a1n, a1r) \
     AROS_UFP2                    \
     (                            \
         rtype, fname,            \
         AROS_UFA(a1t, a1n, a1r)  \
     )

#    define USRFUNC_P2(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r) \
     AROS_UFP2                    \
     (                            \
         rtype, fname,            \
         AROS_UFA(a1t, a1n, a1r), \
         AROS_UFA(a2t, a2n, a2r)  \
     )

#    define USRFUNC_P3(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r) \
     AROS_UFP3                    \
     (                            \
         rtype, fname,            \
         AROS_UFA(a1t, a1n, a1r), \
         AROS_UFA(a2t, a2n, a2r), \
         AROS_UFA(a3t, a3n, a3r)  \
     )

#    define USRFUNC_H1(rtype, fname, a1t, a1n, a1r) \
     AROS_UFH2                    \
     (                            \
         rtype, fname,            \
         AROS_UFA(a1t, a1n, a1r)  \
     )

#    define USRFUNC_H2(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r) \
     AROS_UFH2                    \
     (                            \
         rtype, fname,            \
         AROS_UFA(a1t, a1n, a1r), \
         AROS_UFA(a2t, a2n, a2r)  \
     )

#    define USRFUNC_H3(rtype, fname, a1t, a1n, a1r, a2t, a2n, a2r, a3t, a3n, a3r) \
     AROS_UFH3                    \
     (                            \
         rtype, fname,            \
         AROS_UFA(a1t, a1n, a1r), \
         AROS_UFA(a2t, a2n, a2r), \
         AROS_UFA(a3t, a3n, a3r)  \
     )

#endif /* !AROS */

#endif /* !PLATFORM_SPECIFIC_H */
